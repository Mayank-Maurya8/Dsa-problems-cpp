/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     vector<int> inorderTraversal(TreeNode* root) {
     	vector<int>inorder;
     	TreeNode* cur=root;
     	while(cur!=NULL){
     		// there are two edge cases one, when there doesnt exist any left node
     		if(cur->left==NULL){
     			inorder.push_back(cur->val);
     			cur = cur ->right;
     		}
     		else{
     			// and the another one is when we are going to create the threads to the root node from the right most node of the root->left
     			TreeNode* prev=cur->left;
     			while(prev->right && prev->right!=cur){
     				prev->right;
     			}
     			if(prev->right==NULL){
     				prev->right=cur;
     				cur = cur->left;
     			}
     			// we will check if the prev->right already points to the root then we are going to change it to null and then make cur = cur right 
     			// this is when we have once gone to the root node from the rightmost node , we dont want to repeat the traversal between the left sub and root
     			else{
     				prev->right=NULL;
     				inorder.push_back(cur->val);
     				cur = cur->right;
     			}
     		}
     	}
        return inorder;
    }
};

