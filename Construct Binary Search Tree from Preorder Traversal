/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     int i = 0;
    // we are taking a bound to specify that there wont be any node exceeding that bound to be present in the bst
    TreeNode* bstFromPreorder(vector<int>& A, int bound = INT_MAX) {
        // if we reach the last node of the bst or if any node exceeds the specific bound we will return null
        if (i == A.size() || A[i] > bound) return NULL;
        // so if that node doesnt violates any of the above then we will make a root with that 
        TreeNode* root = new TreeNode(A[i++]);
        // for the left the bound will be set to the root val wheras for the right it has to be set to the bound of roots root
        root->left = bstFromPreorder(A, root->val);
        root->right = bstFromPreorder(A, bound);
        return root;
    }
}; 
