/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==NULL)
            return NULL;
        // if the key is present at the root position 
        if(root->val == key){
            return helper(root);
        }
        // we take another pointer at the root position
        TreeNode* temp = root;
        while(root != NULL){
            if(root->val > key){
                // if the key is on the left sub tree
                if(root->left != NULL && root->left->val == key){
                    root->left = helper(root->left);
                    break;
                } else {
                    root = root->left;
                }
            } else {
                // if the key is on the right sub tree
                if(root->right != NULL && root->right->val == key){
                    root->right = helper(root->right);
                    break;
                } else {
                    root = root->right;
                }
            }
            
        }
        return temp;
    }
    
    TreeNode* helper(TreeNode* node){
        if(node->left == NULL)
            return node ->right;
        else if (node->right == NULL)
            return node->left;
        else{
            // we will call the func to find the last right element and then connect it witht the root->right
            TreeNode* rightchild = node->right;
            TreeNode* lastright = lastrightofleft(node->left);
            lastright->right = node->right;
            return node->left;
        }
            
    }
    
    TreeNode* lastrightofleft(TreeNode* node){
        // find the right most element of the left child 
        // we do this as we have to add the root->right to the root->left->right...... last right 
        if(node->right == NULL)
            return node;
        return lastrightofleft(node->right);
    }
    
};
