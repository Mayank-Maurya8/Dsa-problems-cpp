/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root){
            return 0;
        }
        int ans =0;
        // we have taken the queue with the pairs of node and the level
        queue<pair<TreeNode*,long long int>> q;
        q.push({root,0});
        while(!q.empty()){
            int size = q.size();
            // we will store the minimal index 
            long long int mmin=q.front().second;
            int first,last;
            for(int i=0;i<size;i++){
                // we have subtracted the minimal index at that level
                long long int cur=q.front().second-mmin;
                TreeNode* node = q.front().first;
                q.pop();
                // we have taken the first and the last pointing at the respective ends of the level 
                if(i==0)first=cur;
                if(i==size-1)last=cur;
                // we then go to the sub trees of that particular node 
                if(node->left){
                    q.push({node->left,cur*2+1});
                }
                if(node->right){
                    q.push({node->right,cur*2+2});
                }
            }
            // we now take the max number of nodes which can be accomodated at that particular level 
            ans = max(ans,last-first+1);
        }
        return ans;
    }
};
