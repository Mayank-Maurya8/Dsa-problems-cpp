/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> v;
        // for condition like [] as the input
        if (!root) 
            return v;
        stack<TreeNode*>s;
        s.push(root);
        while(!s.empty()){
            // we take the top element at that stack and then we find the left and right of that element
            root=s.top();
            s.pop();
            // we will push the element at the root as that will be accordintg to the rule of the preorder
            v.push_back(root->val);
            if(root->right!=NULL)
                s.push(root->right);
            if(root->left!=NULL)
                s.push(root->left);
        }
        // then in the end after all the nodes are stored into the vector v we simply return it 
        return v;
        
}
